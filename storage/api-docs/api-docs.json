{
    "swagger": "2.0",
    "info": {
        "title": "Swagger Petstore",
        "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "host": "localhost/captain/public",
    "basePath": "/api",
    "schemes": [
        "https"
    ],
    "paths": {
        "/tasks-bulk/createUnAssignedBulkOfTasks": {
            "post": {
                "tags": [
                    "bulk"
                ],
                "summary": "create un assigned bulk of tasks",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "createUnAssignedBulkOfTasks",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tasks",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "default": "available",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get All Users",
                "description": "Get All Users",
                "operationId": "index",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "default": 200
                                },
                                "success": {
                                    "type": "boolean",
                                    "default": true
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "default": []
                    }
                ]
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                }
            }
        },
        "/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatus",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "default": "available",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the pet",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "formData",
                        "description": "Updated status of the pet",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet": {
            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "description": "",
                "operationId": "updatePet",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "",
                "operationId": "addPet",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "additionalMetadata",
                        "in": "formData",
                        "description": "Additional data to pass to server",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file to upload",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "read:pets",
                            "write:pets"
                        ]
                    }
                ]
            }
        },
        "/v1/tasks/deliver-task": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Driver Can Deliver Task",
                "description": "Driver Can Deliver Task",
                "operationId": "deliverTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "formData",
                        "description": "Task ID to deliver",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Task delivered Successfully"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Failed Operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Fields are invalid"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "SERVER ERROR",
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "message": {
                                    "type": "string",
                                    "default": "Server Error"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "default": []
                    }
                ]
            }
        },
        "/v1/tasks/acknowledge-task-failure": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Driver Can Acknowledge Task Failure",
                "description": "Driver Can Acknowledge Task Failure",
                "operationId": "acknowledgeTaskFailure",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "formData",
                        "description": "Task ID to acknowledge failure",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Task Failure"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Failed Operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Fields are invalid"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "SERVER ERROR",
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "message": {
                                    "type": "string",
                                    "default": "Server Error"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "default": []
                    }
                ]
            }
        },
        "/v1/tasks/assign-task": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Admin Can Assign task to driver",
                "description": "Admin Can Assign task to driver",
                "operationId": "assignTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "formData",
                        "description": "Task ID to be assigned",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "driver_id",
                        "in": "formData",
                        "description": "Driver ID to assign",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Task is assigned successfully"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Failed Operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Fields are invalid"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "SERVER ERROR",
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "message": {
                                    "type": "string",
                                    "default": "Server Error"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "default": []
                    }
                ]
            }
        },
        "/v1/tasks/reassign-task": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Admin Can Reassign task to driver",
                "description": "Admin Can Reassign task to driver",
                "operationId": "ReassignTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "formData",
                        "description": "Task ID to be reassigned",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "driver_id",
                        "in": "formData",
                        "description": "Driver ID to reassign",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Task is reassigned successfully"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Failed Operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Fields are invalid"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "SERVER ERROR",
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "message": {
                                    "type": "string",
                                    "default": "Server Error"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "default": []
                    }
                ]
            }
        },
        "/v1/tasks/acknowledge-task-arrival": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Driver Can Acknowledge Task Arrival",
                "description": "Driver Can Acknowledge Task Arrival",
                "operationId": "acknowledgeTaskArrival",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "formData",
                        "description": "Task ID to acknowledge arrival",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Task Arrival"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Failed Operation",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "default": "Fields are invalid"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "SERVER ERROR",
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "default": false
                                },
                                "message": {
                                    "type": "string",
                                    "default": "Server Error"
                                },
                                "details": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "default": []
                    }
                ]
            }
        }
    },
    "definitions": {
        "ApiResponse": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Pet": {
            "required": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "category": {},
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {},
                    "xml": {
                        "name": "tag",
                        "wrapped": true
                    }
                },
                "status": {
                    "description": "pet status in the store",
                    "type": "string",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ]
                }
            },
            "type": "object",
            "xml": {
                "name": "Pet"
            }
        },
        "User": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "format": "string"
                },
                "email": {
                    "type": "string",
                    "format": "string"
                }
            },
            "type": "object"
        }
    },
    "securityDefinitions": {
        "default": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}